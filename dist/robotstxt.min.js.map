{"version":3,"sources":["robotstxt.js"],"names":["Rule","constructor","type","path","this","regex","createRegex","match","test","pattern","replace","RegExp","Group","userAgent","crawlDelay","undefined","cacheDelay","rules","comment","robotVersion","visitTime","requestRates","getName","getComment","getRobotVersion","getVisitTime","getRequestRates","getCacheDelay","getCrawlDelay","getRules","addRule","Error","push","RobotsTxtParser","content","groups","sitemaps","cleanParam","host","reports","re","requestRate","eol","inlineComment","parse","normalizedContent","contentLines","split","let","index","length","processedLine","trim","colonIndex","indexOf","directive","slice","toLowerCase","value","commentIndex","search","userAgentList","sameUserAgent","userAgentSeen","tempGroups","uaDirectives","currentLine","needsDefaultUa","uaName","normalizedPath","normalizePath","forEach","agent","isNaN","requestRateMatch","startTime","endTime","isValidTime","visitTimeMatch","nextLine","Object","keys","map","key","getReports","isAllowed","url","rule","getApplicableRules","urlPath","normalizeUrlPath","matchingRules","mostSpecific","currentSpecificity","getRuleSpecificity","isDisallowed","getSitemaps","getCleanParams","getHost","getGroup","group","specificity","getApplicableGroups","exactGroups","filter","reduce","acc","concat","URL","pathname","error","decodedPath","decodeURIComponent","newPath","time","hours","parseInt","substring","minutes","robotstxt","exports","window","define","amd"],"mappings":"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","file":"robotstxt.min.js","sourcesContent":["/* global window, exports, define */\n\n!function () {\n    'use strict';\n\n    /**\n     * Single robots.txt rule (allow/disallow directive)\n     */\n    class Rule {\n        /**\n         * Create a new rule instance\n         * @param {string} type - Rule type ('allow', 'disallow' or 'noindex')\n         * @param {string} path - URL path pattern the rule applies to\n         */\n        constructor(type, path) {\n            /** @member {string} */\n            this.type = type;\n            /** @member {string} */\n            this.path = path;\n            /** @member {string} */\n            this.regex = this.createRegex(path);\n        }\n\n        /**\n         * Test if a normalized URL path matches this rule's pattern\n         * @param {string} path - Normalized URL path to test against\n         * @return {boolean} - True if the path matches the rule's pattern\n         */\n        match(path) {\n            return this.regex.test(path);\n        }\n\n        /**\n         * Convert robots.txt path pattern to regular expression\n         * @private\n         * @param {string} path - Normalized URL path pattern to convert\n         * @return {RegExp} - Regular expression for path matching\n         */\n        createRegex(path) {\n            const pattern = path\n                .replace(/[.^+?(){}[\\]|\\\\]/gu, '\\\\$&')  // Escape regex special characters\n                .replace(/\\*/gu, '.*?');                // Replace * with non-greedy wildcard\n\n            return new RegExp(`^${pattern}`, 'u');\n        }\n    }\n\n    /**\n     * Group of rules for a specific user agent\n     */\n    class Group {\n        /**\n         * Create a new user agent group\n         * @param {string} userAgent - User agent string this group applies to\n         */\n        constructor(userAgent) {\n            /** @member {string} - User agent identifier for this group */\n            this.userAgent = userAgent;\n            /** @member {number|undefined} - Delay between crawler requests in seconds */\n            this.crawlDelay = undefined;\n            /** @member {number|undefined} - Specifies the minimum interval for a robot to wait after caching one page, before starting to cache another in seconds */\n            this.cacheDelay = undefined;\n            /** @member {Rule[]} - Collection of rules for this user agent */\n            this.rules = [];\n            /** @member {string} - Optional comment associated with the group */\n            this.comment = [];\n            /** @member {string|undefined} - Version of robots.txt specification used */\n            this.robotVersion = undefined;\n            /** @member {string|undefined} - Recommended visit time from robots.txt */\n            this.visitTime = undefined;\n            /** @member {string[]} - Request rate limits for this user agent */\n            this.requestRates = [];\n        }\n\n        /**\n         * Get the user agent name for this group\n         * @return {string} User agent identifier\n         */\n        getName() {\n            return this.userAgent;\n        }\n\n        /**\n         * Get the comment associated with this group\n         * @return {string[]} Group comment if available\n         */\n        getComment() {\n            return this.comment;\n        }\n\n        /**\n         * Get the robots.txt specification version\n         * @return {string|undefined} Version number of robots.txt specification\n         */\n        getRobotVersion() {\n            return this.robotVersion;\n        }\n\n        /**\n         * Get the recommended visit time for crawler\n         * @return {string|undefined} Suggested crawl time window\n         */\n        getVisitTime() {\n            return this.visitTime;\n        }\n\n        /**\n         * Get request rate limitations for this group\n         * @return {string[]} Array of request rate rules\n         */\n        getRequestRates() {\n            return this.requestRates;\n        }\n\n        /**\n         * Get crawl delay setting for this group\n         * @return {number|undefined} Delay between requests in seconds\n         */\n        getCacheDelay() {\n            return this.cacheDelay;\n        }\n\n        /**\n         * Get crawl delay setting for this group\n         * @return {number|undefined} Delay between requests in seconds\n         */\n        getCrawlDelay() {\n            return this.crawlDelay;\n        }\n\n        /**\n         * Get all rules for this group\n         * @return {Rule[]} Array of rule objects\n         */\n        getRules() {\n            return this.rules;\n        }\n\n        /**\n         * Internal method to add a rule\n         * @param {string} type - Rule type ('allow', 'disallow', 'noindex')\n         * @param {string} path - URL path pattern\n         */\n        addRule(type, path) {\n            if (typeof type === 'undefined') throw new Error('The \"type\" parameter is required.');\n            if (typeof path === 'undefined') throw new Error('The \"path\" parameter is required.');\n            this.rules.push(new Rule(type, path));\n        }\n    }\n\n    /**\n     * The robots.txt parser class\n     */\n    class RobotsTxtParser {\n        /**\n         * Create a new robots.txt parser\n         * @param {string} content - Raw robots.txt content to parse\n         */\n        constructor(content) {\n            /**\n             * @private\n             * @type {Group[]}\n             * @description Collection of user agent groups containing access rules.\n             *              Represents all parsed User-agent sections from robots.txt\n             */\n            this.groups = [];\n\n            /**\n             * @private\n             * @type {string[]}\n             * @description Array of absolute URLs to sitemaps specified in robots.txt.\n             *              Collected from Sitemap directives across the entire file.\n             */\n            this.sitemaps = [];\n\n            /**\n             * @private\n             * @type {string[]}\n             * @description Collection of Clean-param directive values specifying\n             *              dynamic parameters that should be ignored during URL\n             *              canonicalization. These typically include tracking\n             *              parameters, session IDs, or other URL-specific values\n             *              that don't affect content.\n             */\n            this.cleanParam = [];\n\n            /**\n             * @private\n             * @type {string|undefined}\n             * @description Preferred canonical host declaration from Host directive, used to:\n             *                - Specify the primary domain when multiple mirrors exist\n             *                - Handle internationalization/country targeting (ccTLDs)\n             *                - Enforce consistent domain (with/without www) for search engines\n             */\n            this.host = undefined;\n\n            /**\n             * @private\n             * @type {string[]}\n             * @description Parsing error, warning etc. reports\n             */\n            this.reports = [];\n\n            this.re = {\n                robotVersion: /^(\\d+)\\.(\\d+)\\.(\\d+)(?:-([a-zA-Z]+(?:\\.\\d+)?))?$/u,\n                requestRate: /^\\d+\\/\\d+[smh]?\\s+(\\d{4})-(\\d{4})$/u,\n                visitTime: /^(\\d{4})-(\\d{4})$/u,\n                eol: /\\r\\n|\\r|\\n/,\n                inlineComment: /(?:\\s|^)#/\n            };\n\n            this.parse(content);\n        }\n\n        /**\n         * Parse raw robots.txt content into structured format\n         * @private\n         * @param {string} content - Raw robots.txt content\n         */\n        parse(content) {\n            if (typeof content === 'undefined') throw new Error('The \"content\" parameter is required.');\n\n            /** @type {string[]} */\n            const normalizedContent = [];\n\n            const contentLines = content.split(this.re.eol);\n\n            for (let index = 0; index < contentLines.length; index++) {\n                /** @type {string}  - Trimed robots.txt line */\n                const processedLine = contentLines[index].trim();\n\n                if (!processedLine || processedLine[0] === '#') continue;\n\n                /** @type {number} - directive:value separated using colon character */\n                const colonIndex = processedLine.indexOf(':');\n\n                if (colonIndex === -1) continue;\n\n                /** @type {string} - trimmed, lowercase directive */\n                const directive = processedLine.slice(0, colonIndex).trim().toLowerCase();\n\n                /** @type {string} - trimmed directive value */\n                let value = processedLine.slice(colonIndex + 1).trim();\n\n                /** @type {number} - directive value comment index */\n                const commentIndex = value.search(this.re.inlineComment);\n\n                if (commentIndex !== -1) {\n                    // Remove inline comment\n                    value = value.slice(0, commentIndex).trim();\n                }\n\n                // Make sure that directive and value is set\n                if (directive && value) {\n                    normalizedContent.push({ index, directive, value });\n                }\n            }\n\n            /** @type {string[]} */\n            let userAgentList = [];\n            /** @type {boolean} */\n            let sameUserAgent = false;\n            /** @type {boolean} */\n            let userAgentSeen = false;\n            /** @type {Object.<string, Group>} */\n            const tempGroups = {};\n\n            /** @type {string} - Array of directives which require at least one User-Agent present. */\n            const uaDirectives = [\n                'allow',\n                'disallow',\n                'noindex',\n                'comment',\n                'robot-version',\n                'request-rate',\n                'visit-time',\n                'cache-delay',\n                'crawl-delay'\n            ];\n\n            // Process each directive and build rule groups\n            for (let index = 0; index < normalizedContent.length; index++) {\n                /** @type {Object.<string, string>} */\n                const currentLine = normalizedContent[index];\n\n                /** @type {boolean} */\n                const needsDefaultUa = uaDirectives.indexOf(currentLine.directive) !== -1 && !userAgentSeen;\n\n                if (currentLine.directive === 'user-agent' || needsDefaultUa) {\n                    userAgentSeen = true;\n\n                    const uaName = needsDefaultUa ? '*' : currentLine.value;\n\n                    if (!userAgentList.indexOf(uaName) !== -1) {\n                        userAgentList.push(uaName);\n                    }\n\n                    if (!tempGroups[uaName]) {\n                        tempGroups[uaName] = new Group(uaName);\n                    }\n                }\n\n                if (currentLine.directive === 'allow') {\n                    const normalizedPath = this.normalizePath(currentLine.value);\n\n                    userAgentList.forEach(agent => tempGroups[agent].addRule('allow', normalizedPath));\n                    sameUserAgent = true;\n                }\n                else if (currentLine.directive === 'disallow') {\n                    const normalizedPath = this.normalizePath(currentLine.value);\n\n                    userAgentList.forEach(agent => tempGroups[agent].addRule('disallow', normalizedPath));\n                    sameUserAgent = true;\n                }\n                else if (currentLine.directive === 'noindex') {\n                    const normalizedPath = this.normalizePath(currentLine.value);\n\n                    userAgentList.forEach(agent => tempGroups[agent].addRule('noindex', normalizedPath));\n                    sameUserAgent = true;\n                }\n                // Cache-delay: 10\n                else if (currentLine.directive === 'cache-delay') {\n                    const cacheDelay = currentLine.value * 1;\n\n                    if (isNaN(cacheDelay)) {\n                        this.reports.push(`Invalid Cache-delay directive value: \"${currentLine.value}\".`);\n                        continue;\n                    }\n\n                    if (cacheDelay <= 0) {\n                        this.reports.push(`Cache-delay must be a positive number. The provided value is ${cacheDelay}.`);\n                        continue;\n                    }\n\n                    userAgentList.forEach(agent => {\n                        if (!tempGroups[agent].cacheDelay) {\n                            tempGroups[agent].cacheDelay = cacheDelay;\n                        }\n                    });\n                    sameUserAgent = true;\n                }\n                // Crawl-delay: 10\n                else if (currentLine.directive === 'crawl-delay') {\n                    const crawlDelay = currentLine.value * 1;\n\n                    if (isNaN(crawlDelay)) {\n                        this.reports.push(`Invalid Crawl-Delay directive value: \"${currentLine.value}\".`);\n                        continue;\n                    }\n\n                    if (crawlDelay <= 0) {\n                        this.reports.push(`Crawl-Delay must be a positive number. The provided value is ${crawlDelay}.`);\n                        continue;\n                    }\n\n                    userAgentList.forEach(agent => {\n                        if (!tempGroups[agent].crawlDelay) {\n                            tempGroups[agent].crawlDelay = crawlDelay;\n                        }\n                    });\n                    sameUserAgent = true;\n                }\n                // Comment: [text]\n                else if (currentLine.directive === 'comment') {\n                    userAgentList.forEach(agent => tempGroups[agent].comment.push(currentLine.value));\n                    sameUserAgent = true;\n                }\n                // Robot-version: 2.0.0\n                else if (currentLine.directive === 'robot-version') {\n                    if (!this.re.robotVersion.test(currentLine.value)) {\n                        this.reports.push(`Invalid Robot-Version directive value: \"${currentLine.value}\".`);\n                        continue;\n                    }\n\n                    userAgentList.forEach(agent => tempGroups[agent].robotVersion = currentLine.value);\n                    sameUserAgent = true;\n                }\n                // Request-rate: <rate> # 100/24h\n                // Request-rate: <rate> <time> '-' <time> # 100/24h 1300-1659\n                else if (currentLine.directive === 'request-rate') {\n                    const requestRateMatch = currentLine.value.match(this.re.requestRate);\n                    if (!requestRateMatch) {\n                        this.reports.push(`Invalid Request-rate directive value: \"${currentLine.value}\".`);\n                        continue;\n                    }\n\n                    if (requestRateMatch[1] && requestRateMatch[2]) {\n                        const startTime = requestRateMatch[1];\n                        const endTime = requestRateMatch[2];\n\n                        if (!this.isValidTime(startTime) || !this.isValidTime(endTime)) {\n                            this.reports.push(`Invalid Request-rate directive start-end time format: \"${startTime}-${endTime}\".`);\n                            continue;\n                        }\n                    }\n\n                    userAgentList.forEach(agent => tempGroups[agent].requestRates.push(currentLine.value));\n                    sameUserAgent = true;\n                }\n                // Visit-time: <time> '-' <time>\n                else if (currentLine.directive === 'visit-time') {\n                    const visitTimeMatch = currentLine.value.match(this.re.visitTime);\n                    if (!visitTimeMatch) {\n                        this.reports.push(`Invalid Visit-time directive value: \"${currentLine.value}\".`);\n                        continue;\n                    }\n\n                    if (visitTimeMatch[1] && visitTimeMatch[2]) {\n                        const startTime = visitTimeMatch[1];\n                        const endTime = visitTimeMatch[2];\n\n                        if (!this.isValidTime(startTime) || !this.isValidTime(endTime)) {\n                            this.reports.push(`Invalid Visit-time directive start-end time format: \"${startTime}-${endTime}\".`);\n                            continue;\n                        }\n                    }\n\n                    userAgentList.forEach(agent => tempGroups[agent].visitTime = currentLine.value);\n                    sameUserAgent = true;\n                }\n                else if (currentLine.directive === 'sitemap') {\n                    this.sitemaps.push(currentLine.value);\n                }\n                // Clean-param: [parameter1]&[parameter2]&[...] [path]\n                else if (currentLine.directive === 'clean-param') {\n                    this.cleanParam.push(currentLine.value);\n                }\n                else if (currentLine.directive === 'host') {\n                    this.host = currentLine.value;\n                }\n\n                /** @type {Object.<string, string>} */\n                const nextLine = normalizedContent[index + 1];\n\n                // Reset user agent list on new group\n                if (nextLine && sameUserAgent && nextLine.directive === 'user-agent') {\n                    sameUserAgent = false;\n                    userAgentList = [];\n                }\n            }\n\n            this.groups = Object.keys(tempGroups).map(key => tempGroups[key]);\n        }\n\n        /**\n         * Returns the reports collected during parsing and validating the robots.txt file\n         * @returns {string[]} Parsing error, warning etc. reports\n         */\n        getReports() {\n            return this.reports;\n        }\n\n        /**\n         * Check if a URL is allowed for specified user agent\n         * @param {string} url - URL to check\n         * @param {string} userAgent - User agent to check rules for\n         * @return {boolean} - True if allowed, false if disallowed\n         */\n        isAllowed(url, userAgent) {\n            if (typeof url === 'undefined') throw new Error('The \"url\" parameter is required.');\n            if (typeof userAgent === 'undefined') throw new Error('The \"userAgent\" parameter is required.');\n\n            /** @type {Rule[]} */\n            const rules = this.getApplicableRules(userAgent);\n            /** @type {string} */\n            const urlPath = this.normalizeUrlPath(url);\n            /** @type {Rule[]} */\n            const matchingRules = [];\n\n            for (const rule of rules) {\n                if (rule.match(urlPath)) {\n                    matchingRules.push(rule);\n                }\n            }\n\n            if (matchingRules.length === 0) return true;\n\n            /** @type {Rule} */\n            let mostSpecific = matchingRules[0];\n\n            // Find most specific rule based on path length and special characters\n            for (const rule of matchingRules) {\n                /** @type {number} */\n                const currentSpecificity = this.getRuleSpecificity(rule.path);\n                /** @type {number} */\n                const mostSpecificSpecificity = this.getRuleSpecificity(mostSpecific.path);\n\n                if (currentSpecificity > mostSpecificSpecificity) {\n                    mostSpecific = rule;\n                }\n            }\n\n            return mostSpecific.type === 'allow';\n        }\n\n        /**\n         * Check if a URL is disallowed for specified user agent\n         * @param {string} url - URL to check\n         * @param {string} userAgent - User agent to check rules for\n         * @return {boolean} - True if disallowed, false if allowed\n         */\n        isDisallowed(url, userAgent) {\n            return !this.isAllowed(url, userAgent);\n        }\n\n        /**\n         * Get sitemap URLs found in robots.txt\n         * @return {string[]} - Array of sitemap URLs\n         */\n        getSitemaps() {\n            return this.sitemaps;\n        }\n\n        /**\n         * Retrieve Clean-param directives for URL parameter sanitization\n         * @returns {string[]} Array of parameter patterns in Clean-param format:\n         *                         - Each entry follows \"param[&param2] [path-prefix]\" syntax\n         *                         - Path prefix is optional and specifies URL scope\n         */\n        getCleanParams() {\n            return this.cleanParam;\n        }\n\n        /**\n         * Get canonical host declaration for domain normalization\n         * @returns {string|undefined} Preferred hostname in one of these formats:\n         *                        - Domain without protocol (e.g., \"www.example.com\")\n         *                        - Domain with port (e.g., \"example.com:8080\")\n         *                        - undefined if no Host directive declared\n         */\n        getHost() {\n            return this.host = undefined;\n        }\n\n        /**\n         * Get group for specific user agent\n         * @param {string} userAgent - User agent to search for\n         * @return {Group|undefined} - Matching group or undefined\n         */\n        getGroup(userAgent) {\n            if (!userAgent) return undefined;\n            for (let index = 0; index < this.groups.length; index++) {\n                const group = this.groups[index];\n\n                if (group.userAgent.toLowerCase() === userAgent.toLowerCase()) {\n                    return group;\n                }\n            }\n            return undefined;\n        }\n\n        /**\n         * Calculate rule specificity score for path comparison\n         * @private\n         * @param {string} path - URL path pattern\n         * @return {number} - Specificity score (higher = more specific)\n         */\n        getRuleSpecificity(path) {\n            /** @type {number} */\n            let specificity = path.length;\n            if (path.indexOf('*') !== -1) specificity -= 0.5;\n            else if (path.slice(-1) === '$') specificity += 0.5;\n            return specificity;\n        }\n\n        /**\n         * Get groups applicable to specified user agent\n         * @private\n         * @param {string} userAgent - User agent to check\n         * @return {Group[]} - Array of matching groups\n         */\n        getApplicableGroups(userAgent) {\n            /** @type {Group[]} */\n            const exactGroups = this.groups.filter(group => group.getName().toLowerCase() === userAgent.toLowerCase());\n            if (exactGroups.length > 0) return exactGroups;\n            return this.groups.filter(group => group.getName() === '*');\n        }\n\n        /**\n         * Get all rules applicable to specified user agent\n         * @private\n         * @param {string} userAgent - User agent to check\n         * @return {Rule[]} - Array of applicable rules\n         */\n        getApplicableRules(userAgent) {\n            /** @type {Rule[]} */\n            const rules = this.getApplicableGroups(userAgent);\n            return rules.reduce((acc, group) => acc.concat(group.getRules()), []);\n        }\n\n        /**\n         * Normalize URL path for comparison\n         * @private\n         * @param {string} url - URL or path to normalize\n         * @return {string} - Normalized path\n         */\n        normalizeUrlPath(url) {\n            try {\n                return this.normalizePath(new URL(url).pathname);\n            } catch (error) {\n                return this.normalizePath(url);\n            }\n        }\n\n        /**\n         * Normalize path string for consistent comparisons\n         * @private\n         * @param {string} path - URL path to normalize\n         * @return {string} - Normalized path\n         */\n        normalizePath(path) {\n            /** @type {string} */\n            let decodedPath;\n            try {\n                decodedPath = decodeURIComponent(path);\n            } catch (error) {\n                decodedPath = path;\n            }\n            /** @type {string} */\n            const newPath = decodedPath.replace(/\\/+/gu, '/');\n            if (newPath[0] === '/') return newPath;\n            return `/${newPath}`;\n        }\n\n        isValidTime(time) {\n            const hours = parseInt(time.substring(0, 2), 10);\n            const minutes = parseInt(time.substring(2, 4), 10);\n\n            // Validate hours and minutes\n            return hours >= 0 && hours <= 23 && minutes >= 0 && minutes <= 59;\n        }\n    }\n\n    /**\n     * Create a new robots.txt parser instance\n     * @param {string} content - Raw robots.txt content\n     * @return {RobotsTxtParser} - Configured parser instance\n     */\n    function robotstxt(content) {\n        return new RobotsTxtParser(content);\n    }\n\n    // Universal module exports\n    /* eslint-disable quote-props */\n    if (typeof exports !== 'undefined') {\n        exports.robotstxt = robotstxt;\n    }\n    if (typeof window !== 'undefined') {\n        window.robotstxt = robotstxt;\n        if (typeof define === 'function' && define.amd) {\n            define(() => ({ robotstxt }));\n        }\n    }\n    /* eslint-enable quote-props */\n}();\n"]}