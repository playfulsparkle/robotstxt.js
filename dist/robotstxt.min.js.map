{"version":3,"sources":["robotstxt.js"],"names":["Rule","constructor","type","path","this","regex","createRegex","match","test","pattern","replace","RegExp","Group","userAgent","crawlDelay","undefined","cacheDelay","rules","comment","robotVersion","visitTime","requestRates","getName","getComment","getRobotVersion","getVisitTime","getRequestRates","getCacheDelay","getCrawlDelay","getRules","addRule","Error","push","RobotsTxtParser","content","groups","sitemaps","cleanParam","host","reports","re","requestRate","parse","line","normalizedContent","split","processedLine","trim","colonIndex","indexOf","directive","slice","toLowerCase","let","value","commentIndex","search","userAgentList","sameUserAgent","userAgentSeen","tempGroups","uaDirectives","index","length","currentLine","needsDefaultUa","uaName","normalizedPath","normalizePath","forEach","agent","isNaN","requestRateMatch","startTime","endTime","isValidTime","nextLine","Object","keys","map","key","getReports","isAllowed","url","rule","getApplicableRules","urlPath","normalizeUrlPath","matchingRules","mostSpecific","currentSpecificity","getRuleSpecificity","isDisallowed","getSitemaps","getCleanParams","getHost","getGroup","i","group","specificity","getApplicableGroups","exactGroups","filter","reduce","acc","concat","URL","pathname","error","decodedPath","decodeURIComponent","newPath","time","hours","parseInt","substring","minutes","robotstxt","exports","window","define","amd"],"mappings":"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","file":"robotstxt.min.js","sourcesContent":["/* global window, exports, define */\n\n!function () {\n    'use strict';\n\n    /**\n     * Single robots.txt rule (allow/disallow directive)\n     */\n    class Rule {\n        /**\n         * Create a new rule instance\n         * @param {string} type - Rule type ('allow', 'disallow' or 'noindex')\n         * @param {string} path - URL path pattern the rule applies to\n         */\n        constructor(type, path) {\n            /** @member {string} */\n            this.type = type;\n            /** @member {string} */\n            this.path = path;\n            /** @member {string} */\n            this.regex = this.createRegex(path);\n        }\n\n        /**\n         * Test if a normalized URL path matches this rule's pattern\n         * @param {string} path - Normalized URL path to test against\n         * @return {boolean} - True if the path matches the rule's pattern\n         */\n        match(path) {\n            return this.regex.test(path);\n        }\n\n        /**\n         * Convert robots.txt path pattern to regular expression\n         * @private\n         * @param {string} path - Normalized URL path pattern to convert\n         * @return {RegExp} - Regular expression for path matching\n         */\n        createRegex(path) {\n            const pattern = path\n                .replace(/[.^+?(){}[\\]|\\\\]/gu, '\\\\$&')  // Escape regex special characters\n                .replace(/\\*/gu, '.*?');                // Replace * with non-greedy wildcard\n\n            return new RegExp(`^${pattern}`, 'u');\n        }\n    }\n\n    /**\n     * Group of rules for a specific user agent\n     */\n    class Group {\n        /**\n         * Create a new user agent group\n         * @param {string} userAgent - User agent string this group applies to\n         */\n        constructor(userAgent) {\n            /** @member {string} - User agent identifier for this group */\n            this.userAgent = userAgent;\n            /** @member {number|undefined} - Delay between crawler requests in seconds */\n            this.crawlDelay = undefined;\n            /** @member {number|undefined} - Specifies the minimum interval for a robot to wait after caching one page, before starting to cache another in seconds */\n            this.cacheDelay = undefined;\n            /** @member {Rule[]} - Collection of rules for this user agent */\n            this.rules = [];\n            /** @member {string} - Optional comment associated with the group */\n            this.comment = [];\n            /** @member {string|undefined} - Version of robots.txt specification used */\n            this.robotVersion = undefined;\n            /** @member {string|undefined} - Recommended visit time from robots.txt */\n            this.visitTime = undefined;\n            /** @member {string[]} - Request rate limits for this user agent */\n            this.requestRates = [];\n        }\n\n        /**\n         * Get the user agent name for this group\n         * @return {string} User agent identifier\n         */\n        getName() {\n            return this.userAgent;\n        }\n\n        /**\n         * Get the comment associated with this group\n         * @return {string[]} Group comment if available\n         */\n        getComment() {\n            return this.comment;\n        }\n\n        /**\n         * Get the robots.txt specification version\n         * @return {string|undefined} Version number of robots.txt specification\n         */\n        getRobotVersion() {\n            return this.robotVersion;\n        }\n\n        /**\n         * Get the recommended visit time for crawler\n         * @return {string|undefined} Suggested crawl time window\n         */\n        getVisitTime() {\n            return this.visitTime;\n        }\n\n        /**\n         * Get request rate limitations for this group\n         * @return {string[]} Array of request rate rules\n         */\n        getRequestRates() {\n            return this.requestRates;\n        }\n\n        /**\n         * Get crawl delay setting for this group\n         * @return {number|undefined} Delay between requests in seconds\n         */\n        getCacheDelay() {\n            return this.cacheDelay;\n        }\n\n        /**\n         * Get crawl delay setting for this group\n         * @return {number|undefined} Delay between requests in seconds\n         */\n        getCrawlDelay() {\n            return this.crawlDelay;\n        }\n\n        /**\n         * Get all rules for this group\n         * @return {Rule[]} Array of rule objects\n         */\n        getRules() {\n            return this.rules;\n        }\n\n        /**\n         * Internal method to add a rule\n         * @param {string} type - Rule type ('allow', 'disallow', 'noindex')\n         * @param {string} path - URL path pattern\n         */\n        addRule(type, path) {\n            if (typeof type === 'undefined') throw new Error('The \"type\" parameter is required.');\n            if (typeof path === 'undefined') throw new Error('The \"path\" parameter is required.');\n            this.rules.push(new Rule(type, path));\n        }\n    }\n\n    /**\n     * The robots.txt parser class\n     */\n    class RobotsTxtParser {\n        /**\n         * Create a new robots.txt parser\n         * @param {string} content - Raw robots.txt content to parse\n         */\n        constructor(content) {\n            /**\n             * @private\n             * @type {Group[]}\n             * @description Collection of user agent groups containing access rules.\n             *              Represents all parsed User-agent sections from robots.txt\n             */\n            this.groups = [];\n\n            /**\n             * @private\n             * @type {string[]}\n             * @description Array of absolute URLs to sitemaps specified in robots.txt.\n             *              Collected from Sitemap directives across the entire file.\n             */\n            this.sitemaps = [];\n\n            /**\n             * @private\n             * @type {string[]}\n             * @description Collection of Clean-param directive values specifying\n             *              dynamic parameters that should be ignored during URL\n             *              canonicalization. These typically include tracking\n             *              parameters, session IDs, or other URL-specific values\n             *              that don't affect content.\n             */\n            this.cleanParam = [];\n\n            /**\n             * @private\n             * @type {string|undefined}\n             * @description Preferred canonical host declaration from Host directive, used to:\n             *                - Specify the primary domain when multiple mirrors exist\n             *                - Handle internationalization/country targeting (ccTLDs)\n             *                - Enforce consistent domain (with/without www) for search engines\n             */\n            this.host = undefined;\n\n            /**\n             * @private\n             * @type {string[]}\n             * @description Parsing error, warning etc. reports\n             */\n            this.reports = [];\n\n            this.re = {\n                robotVersion: /^(\\d+)\\.(\\d+)\\.(\\d+)(?:-([a-zA-Z]+(?:\\.\\d+)?))?$/u,\n                requestRate: /^\\d+\\/\\d+[smh]?\\s+(\\d{4})-(\\d{4})$/u,\n                visitTime: /^([01]\\d|2[0-3])([0-5]\\d)-([01]\\d|2[0-3])([0-5]\\d)$/u\n            };\n\n            this.parse(content);\n        }\n\n        /**\n         * Parse raw robots.txt content into structured format\n         * @private\n         * @param {string} content - Raw robots.txt content\n         */\n        parse(content) {\n            if (typeof content === 'undefined') throw new Error('The \"content\" parameter is required.');\n\n            /** @type {string[]} */\n            const normalizedContent = [];\n\n            for (const line of content.split(/\\r\\n|\\r|\\n/)) {\n                /** @type {string} */\n                const processedLine = line.trim();\n\n                if (!processedLine || processedLine[0] === '#') continue;\n\n                /** @type {number} */\n                const colonIndex = processedLine.indexOf(':');\n                if (colonIndex === -1) continue;\n\n                /** @type {string} */\n                const directive = processedLine.slice(0, colonIndex).trim().toLowerCase();\n                /** @type {string} */\n                let value = processedLine.slice(colonIndex + 1).trim();\n\n                /** @type {number} */\n                const commentIndex = value.search(/(?:\\s|^)#/);\n                if (commentIndex !== -1) {\n                    value = value.slice(0, commentIndex).trim();\n                }\n\n                if (directive && value) {\n                    normalizedContent.push({ directive, value });\n                }\n            }\n\n            /** @type {string[]} */\n            let userAgentList = [];\n            /** @type {boolean} */\n            let sameUserAgent = false;\n            /** @type {boolean} */\n            let userAgentSeen = false;\n            /** @type {Object.<string, Group>} */\n            const tempGroups = {};\n\n            /** @type {string} - Array of directives which require at least one User-Agent present. */\n            const uaDirectives = [\n                'allow',\n                'disallow',\n                'noindex',\n                'comment',\n                'robot-version',\n                'request-rate',\n                'visit-time',\n                'cache-delay',\n                'crawl-delay'\n            ];\n\n            // Process each directive and build rule groups\n            for (let index = 0; index < normalizedContent.length; index++) {\n                /** @type {Object.<string, string>} */\n                const currentLine = normalizedContent[index];\n\n                /** @type {boolean} */\n                const needsDefaultUa = uaDirectives.indexOf(currentLine.directive) !== -1 && !userAgentSeen;\n\n                if (currentLine.directive === 'user-agent' || needsDefaultUa) {\n                    userAgentSeen = true;\n\n                    const uaName = needsDefaultUa ? '*' : currentLine.value;\n\n                    if (!userAgentList.indexOf(uaName) !== -1) {\n                        userAgentList.push(uaName);\n                    }\n\n                    if (!tempGroups[uaName]) {\n                        tempGroups[uaName] = new Group(uaName);\n                    }\n                }\n\n                if (currentLine.directive === 'allow') {\n                    const normalizedPath = this.normalizePath(currentLine.value);\n\n                    userAgentList.forEach(agent => tempGroups[agent].addRule('allow', normalizedPath));\n                    sameUserAgent = true;\n                }\n                else if (currentLine.directive === 'disallow') {\n                    const normalizedPath = this.normalizePath(currentLine.value);\n\n                    userAgentList.forEach(agent => tempGroups[agent].addRule('disallow', normalizedPath));\n                    sameUserAgent = true;\n                }\n                else if (currentLine.directive === 'noindex') {\n                    const normalizedPath = this.normalizePath(currentLine.value);\n\n                    userAgentList.forEach(agent => tempGroups[agent].addRule('noindex', normalizedPath));\n                    sameUserAgent = true;\n                }\n                else if (currentLine.directive === 'cache-delay') {\n                    const cacheDelay = currentLine.value * 1;\n\n                    if (isNaN(cacheDelay)) {\n                        this.reports.push(`Invalid Cache-delay value: ${currentLine.value} is not a number.`);\n                        continue;\n                    }\n\n                    if (cacheDelay <= 0) {\n                        this.reports.push(`Cache-delay must be a positive number. The provided value is ${cacheDelay}.`);\n                        continue;\n                    }\n\n                    userAgentList.forEach(agent => {\n                        if (!tempGroups[agent].cacheDelay) {\n                            tempGroups[agent].cacheDelay = cacheDelay;\n                        }\n                    });\n                    sameUserAgent = true;\n                }\n                else if (currentLine.directive === 'crawl-delay') {\n                    const crawlDelay = currentLine.value * 1;\n\n                    if (isNaN(crawlDelay)) {\n                        this.reports.push(`Invalid Crawl-Delay value: ${currentLine.value} is not a number.`);\n                        continue;\n                    }\n\n                    if (crawlDelay <= 0) {\n                        this.reports.push(`Crawl-Delay must be a positive number. The provided value is ${crawlDelay}.`);\n                        continue;\n                    }\n\n                    userAgentList.forEach(agent => {\n                        if (!tempGroups[agent].crawlDelay) {\n                            tempGroups[agent].crawlDelay = crawlDelay;\n                        }\n                    });\n                    sameUserAgent = true;\n                }\n                else if (currentLine.directive === 'comment') {\n                    userAgentList.forEach(agent => tempGroups[agent].comment.push(currentLine.value));\n                    sameUserAgent = true;\n                }\n                else if (currentLine.directive === 'robot-version') {\n                    if (!this.re.robotVersion.test(currentLine.value)) {\n                        this.reports.push(`Invalid Robot-Version value: ${currentLine.value} does not match semantic versioning format.`);\n                        continue;\n                    }\n\n                    userAgentList.forEach(agent => tempGroups[agent].robotVersion = currentLine.value);\n                    sameUserAgent = true;\n                }\n                else if (currentLine.directive === 'request-rate') {\n                    const requestRateMatch = currentLine.value.match(this.re.requestRate);\n                    if (!requestRateMatch) {\n                        this.reports.push(`Invalid Request-rate value: ${currentLine.value} does not match required format.`);\n                        continue;\n                    }\n\n                    if (requestRateMatch[1] && requestRateMatch[2]) {\n                        const startTime = requestRateMatch[1];\n                        const endTime = requestRateMatch[2];\n\n                        if (!this.isValidTime(startTime) || !this.isValidTime(endTime)) {\n                            this.reports.push(`Invalid Request-rate time format: ${startTime}-${endTime}. Times must be in 24-hour HHMM format (0000-2359).`);\n                            continue;\n                        }\n                    }\n\n                    userAgentList.forEach(agent => tempGroups[agent].requestRates.push(currentLine.value));\n                    sameUserAgent = true;\n                }\n                else if (currentLine.directive === 'visit-time') {\n                    if (!this.re.visitTime.test(currentLine.value)) {\n                        this.reports.push(`Invalid Visit-time value: ${currentLine.value} does not match time range format.`);\n                        continue;\n                    }\n\n                    userAgentList.forEach(agent => tempGroups[agent].visitTime = currentLine.value);\n                    sameUserAgent = true;\n                }\n                else if (currentLine.directive === 'sitemap') {\n                    this.sitemaps.push(currentLine.value);\n                }\n                else if (currentLine.directive === 'clean-param') {\n                    this.cleanParam.push(currentLine.value);\n                }\n                else if (currentLine.directive === 'host') {\n                    this.host = currentLine.value;\n                }\n\n                /** @type {Object.<string, string>} */\n                const nextLine = normalizedContent[index + 1];\n\n                // Reset user agent list on new group\n                if (nextLine && sameUserAgent && nextLine.directive === 'user-agent') {\n                    sameUserAgent = false;\n                    userAgentList = [];\n                }\n            }\n\n            this.groups = Object.keys(tempGroups).map(key => tempGroups[key]);\n        }\n\n        /**\n         * Returns the reports collected during parsing and validating the robots.txt file\n         * @returns {string[]} Parsing error, warning etc. reports\n         */\n        getReports() {\n            return this.reports;\n        }\n\n        /**\n         * Check if a URL is allowed for specified user agent\n         * @param {string} url - URL to check\n         * @param {string} userAgent - User agent to check rules for\n         * @return {boolean} - True if allowed, false if disallowed\n         */\n        isAllowed(url, userAgent) {\n            if (typeof url === 'undefined') throw new Error('The \"url\" parameter is required.');\n            if (typeof userAgent === 'undefined') throw new Error('The \"userAgent\" parameter is required.');\n\n            /** @type {Rule[]} */\n            const rules = this.getApplicableRules(userAgent);\n            /** @type {string} */\n            const urlPath = this.normalizeUrlPath(url);\n            /** @type {Rule[]} */\n            const matchingRules = [];\n\n            for (const rule of rules) {\n                if (rule.match(urlPath)) {\n                    matchingRules.push(rule);\n                }\n            }\n\n            if (matchingRules.length === 0) return true;\n\n            /** @type {Rule} */\n            let mostSpecific = matchingRules[0];\n\n            // Find most specific rule based on path length and special characters\n            for (const rule of matchingRules) {\n                /** @type {number} */\n                const currentSpecificity = this.getRuleSpecificity(rule.path);\n                /** @type {number} */\n                const mostSpecificSpecificity = this.getRuleSpecificity(mostSpecific.path);\n\n                if (currentSpecificity > mostSpecificSpecificity) {\n                    mostSpecific = rule;\n                }\n            }\n\n            return mostSpecific.type === 'allow';\n        }\n\n        /**\n         * Check if a URL is disallowed for specified user agent\n         * @param {string} url - URL to check\n         * @param {string} userAgent - User agent to check rules for\n         * @return {boolean} - True if disallowed, false if allowed\n         */\n        isDisallowed(url, userAgent) {\n            return !this.isAllowed(url, userAgent);\n        }\n\n        /**\n         * Get sitemap URLs found in robots.txt\n         * @return {string[]} - Array of sitemap URLs\n         */\n        getSitemaps() {\n            return this.sitemaps;\n        }\n\n        /**\n         * Retrieve Clean-param directives for URL parameter sanitization\n         * @returns {string[]} Array of parameter patterns in Clean-param format:\n         *                         - Each entry follows \"param[&param2] [path-prefix]\" syntax\n         *                         - Path prefix is optional and specifies URL scope\n         */\n        getCleanParams() {\n            return this.cleanParam;\n        }\n\n        /**\n         * Get canonical host declaration for domain normalization\n         * @returns {string|undefined} Preferred hostname in one of these formats:\n         *                        - Domain without protocol (e.g., \"www.example.com\")\n         *                        - Domain with port (e.g., \"example.com:8080\")\n         *                        - undefined if no Host directive declared\n         */\n        getHost() {\n            return this.host = undefined;\n        }\n\n        /**\n         * Get group for specific user agent\n         * @param {string} userAgent - User agent to search for\n         * @return {Group|undefined} - Matching group or undefined\n         */\n        getGroup(userAgent) {\n            if (!userAgent) return undefined;\n            for (let i = 0; i < this.groups.length; i++) {\n                const group = this.groups[i];\n\n                if (group.userAgent.toLowerCase() === userAgent.toLowerCase()) {\n                    return group;\n                }\n            }\n            return undefined;\n        }\n\n        /**\n         * Calculate rule specificity score for path comparison\n         * @private\n         * @param {string} path - URL path pattern\n         * @return {number} - Specificity score (higher = more specific)\n         */\n        getRuleSpecificity(path) {\n            /** @type {number} */\n            let specificity = path.length;\n            if (path.indexOf('*') !== -1) specificity -= 0.5;\n            else if (path.slice(-1) === '$') specificity += 0.5;\n            return specificity;\n        }\n\n        /**\n         * Get groups applicable to specified user agent\n         * @private\n         * @param {string} userAgent - User agent to check\n         * @return {Group[]} - Array of matching groups\n         */\n        getApplicableGroups(userAgent) {\n            /** @type {Group[]} */\n            const exactGroups = this.groups.filter(group => group.getName().toLowerCase() === userAgent.toLowerCase());\n            if (exactGroups.length > 0) return exactGroups;\n            return this.groups.filter(group => group.getName() === '*');\n        }\n\n        /**\n         * Get all rules applicable to specified user agent\n         * @private\n         * @param {string} userAgent - User agent to check\n         * @return {Rule[]} - Array of applicable rules\n         */\n        getApplicableRules(userAgent) {\n            /** @type {Rule[]} */\n            const rules = this.getApplicableGroups(userAgent);\n            return rules.reduce((acc, group) => acc.concat(group.getRules()), []);\n        }\n\n        /**\n         * Normalize URL path for comparison\n         * @private\n         * @param {string} url - URL or path to normalize\n         * @return {string} - Normalized path\n         */\n        normalizeUrlPath(url) {\n            try {\n                return this.normalizePath(new URL(url).pathname);\n            } catch (error) {\n                return this.normalizePath(url);\n            }\n        }\n\n        /**\n         * Normalize path string for consistent comparisons\n         * @private\n         * @param {string} path - URL path to normalize\n         * @return {string} - Normalized path\n         */\n        normalizePath(path) {\n            /** @type {string} */\n            let decodedPath;\n            try {\n                decodedPath = decodeURIComponent(path);\n            } catch (error) {\n                decodedPath = path;\n            }\n            /** @type {string} */\n            const newPath = decodedPath.replace(/\\/+/gu, '/');\n            if (newPath[0] === '/') return newPath;\n            return `/${newPath}`;\n        }\n\n        isValidTime(time) {\n            const hours = parseInt(time.substring(0, 2), 10);\n            const minutes = parseInt(time.substring(2, 4), 10);\n\n            // Validate hours and minutes\n            return hours >= 0 && hours <= 23 && minutes >= 0 && minutes <= 59;\n        }\n    }\n\n    /**\n     * Create a new robots.txt parser instance\n     * @param {string} content - Raw robots.txt content\n     * @return {RobotsTxtParser} - Configured parser instance\n     */\n    function robotstxt(content) {\n        return new RobotsTxtParser(content);\n    }\n\n    // Universal module exports\n    /* eslint-disable quote-props */\n    if (typeof exports !== 'undefined') {\n        exports.robotstxt = robotstxt;\n    }\n    if (typeof window !== 'undefined') {\n        window.robotstxt = robotstxt;\n        if (typeof define === 'function' && define.amd) {\n            define(() => ({ robotstxt }));\n        }\n    }\n    /* eslint-enable quote-props */\n}();\n"]}